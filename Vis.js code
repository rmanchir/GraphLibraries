var nodeIds, shadowState, nodesArray, nodes, edgesArray, edges, network;

function startNetwork() {
  // this list is kept to remove a random node.. we do not add node 1 here because it's used for changes
  //nodeIds = [2, 3, 4, 5];
  shadowState = false;

  // create an array with nodes

 nodes= [];
 edges= [];

var nbNode = 100;
var nbEdge = 100;
for (let i = 0; i < nbNode; i++) {
  nodes.push({id : i +""});
}
for (let i = 0; i < nbEdge; i++) {
  edges.push(
    {
      //id : i ,
    from: '' + (Math.random() * nbNode | 0),
    to: '' + (Math.random() * nbNode | 0),
});

}
nodes = new vis.DataSet(nodes);
edges = new vis.DataSet(edges);


  // create a network
  var container = document.getElementById("mynetwork");
  var data = {
    nodes: nodes,
    edges: edges,
  };
  var options = {};
  network = new vis.Network(container, data, options);
}

function addNode() {
  var newId = (Math.random() * 1e7).toString(32);
  nodes.add({ id: newId, label: "I'm new!" });
  nodeIds.push(newId);
}

function changeNode1() {
  var newColor = "#" + Math.floor(Math.random() * 255 * 255 * 255).toString(16);
  nodes.update([{ id: 1, color: { background: newColor } }]);
}

function removeRandomNode() {
  var randomNodeId = nodeIds[Math.floor(Math.random() * nodeIds.length)];
  nodes.remove({ id: randomNodeId });

  var index = nodeIds.indexOf(randomNodeId);
  nodeIds.splice(index, 1);
}

function changeOptions() {
  shadowState = !shadowState;
  network.setOptions({
    nodes: { shadow: shadowState },
    edges: { shadow: shadowState },
  });
}

function resetAllNodes() {
  nodes.clear();
  edges.clear();
  nodes.add(nodesArray);
  edges.add(edgesArray);
}

function resetAllNodesStabilize() {
  resetAllNodes();
  network.stabilize();
}

function setTheData() {
  nodes = new vis.DataSet(nodesArray);
  edges = new vis.DataSet(edgesArray);
  network.setData({ nodes: nodes, edges: edges });
}

function resetAll() {
  if (network !== null) {
    network.destroy();
    network = null;
  }
  startNetwork();
}

startNetwork();
